<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面经——JavaScript</title>
    <url>/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94JavaScript/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>面经——CSS</title>
    <url>/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94CSS/</url>
    <content><![CDATA[<h4 id="1-盒模型"><a href="#1-盒模型" class="headerlink" title="1.盒模型"></a>1.盒模型</h4><h4 id="2-BFC-块状模式上下文"><a href="#2-BFC-块状模式上下文" class="headerlink" title="2. BFC:块状模式上下文"></a>2. BFC:块状模式上下文</h4><h4 id="3-布局"><a href="#3-布局" class="headerlink" title="3. 布局"></a>3. 布局</h4><p><strong>flex布局</strong></p>
<p><strong>浮动布局，浮动清除</strong></p>
<p><strong>z-index的定位方法</strong></p>
<p><strong>三栏布局</strong></p>
<blockquote>
<p><strong>浮动布局时,三个div的生成顺序有没有影响？</strong></p>
</blockquote>
<p><strong>垂直居中的方法</strong></p>
<blockquote>
<p><strong>如何实现图片在某个容器中居中？</strong></p>
<p><strong>有一个width:300,height:300的div，怎么实现在屏幕上垂直水平居中？</strong></p>
</blockquote>
<h4 id="4-display属性"><a href="#4-display属性" class="headerlink" title="4.display属性"></a>4.display属性</h4><p><strong>block，inline，inline-block的区别</strong></p>
<h4 id="2-画一条0-5px的线"><a href="#2-画一条0-5px的线" class="headerlink" title="2. 画一条0.5px的线"></a>2. 画一条0.5px的线</h4><h4 id="3-link标签和import标签的区别"><a href="#3-link标签和import标签的区别" class="headerlink" title="3. link标签和import标签的区别"></a>3. link标签和import标签的区别</h4><h4 id="4-transition和animation的区别"><a href="#4-transition和animation的区别" class="headerlink" title="4. transition和animation的区别"></a>4. transition和animation的区别</h4><h4 id="8-关于JS动画和CSS3动画的差异性"><a href="#8-关于JS动画和CSS3动画的差异性" class="headerlink" title="8. 关于JS动画和CSS3动画的差异性"></a>8. 关于JS动画和CSS3动画的差异性</h4><h4 id="9-说一下块元素和行内元素"><a href="#9-说一下块元素和行内元素" class="headerlink" title="9. 说一下块元素和行内元素"></a>9. 说一下块元素和行内元素</h4><h4 id="10-多行元素的文本省略号"><a href="#10-多行元素的文本省略号" class="headerlink" title="10. 多行元素的文本省略号"></a>10. 多行元素的文本省略号</h4><h4 id="11-visibility-hidden-opacity-0-display-none"><a href="#11-visibility-hidden-opacity-0-display-none" class="headerlink" title="11.  visibility=hidden,opacity=0,display : none"></a>11.  visibility=hidden,opacity=0,display : none</h4><h4 id="12-双边距重叠问题（外边距折叠）"><a href="#12-双边距重叠问题（外边距折叠）" class="headerlink" title="12. 双边距重叠问题（外边距折叠）"></a>12. 双边距重叠问题（外边距折叠）</h4><h4 id="13-position属性"><a href="#13-position属性" class="headerlink" title="13. position属性"></a>13. position属性</h4><h4 id="14-浮动清除"><a href="#14-浮动清除" class="headerlink" title="14. 浮动清除"></a>14. 浮动清除</h4><h4 id="15-CSS3新特性"><a href="#15-CSS3新特性" class="headerlink" title="15. CSS3新特性"></a>15. CSS3新特性</h4><h4 id="16-CSS选择器有哪些，优先级如何？"><a href="#16-CSS选择器有哪些，优先级如何？" class="headerlink" title="16. CSS选择器有哪些，优先级如何？"></a>16. CSS选择器有哪些，优先级如何？</h4><h4 id="17-CSS3的溢出处理，overflow的原理"><a href="#17-CSS3的溢出处理，overflow的原理" class="headerlink" title="17.  CSS3的溢出处理，overflow的原理"></a>17.  CSS3的溢出处理，overflow的原理</h4><h4 id="18-三栏布局的实现方式"><a href="#18-三栏布局的实现方式" class="headerlink" title="18. 三栏布局的实现方式"></a>18. 三栏布局的实现方式</h4><blockquote>
<p><strong>浮动布局时,三个div的生成顺序有没有影响？</strong></p>
</blockquote>
<h4 id="19-calc属性"><a href="#19-calc属性" class="headerlink" title="19. calc属性"></a>19. calc属性</h4><h4 id="20-display-table和本身的table有什么区别"><a href="#20-display-table和本身的table有什么区别" class="headerlink" title="20. display: table和本身的table有什么区别"></a>20. display: table和本身的table有什么区别</h4><h4 id="21-用的最多的css属性是什么？"><a href="#21-用的最多的css属性是什么？" class="headerlink" title="21. 用的最多的css属性是什么？"></a>21. 用的最多的css属性是什么？</h4><h4 id="22-box-sizing"><a href="#22-box-sizing" class="headerlink" title="22.box-sizing"></a>22.box-sizing</h4><h4 id="23-css预处理器有什么？"><a href="#23-css预处理器有什么？" class="headerlink" title="23.css预处理器有什么？"></a>23.css预处理器有什么？</h4><h4 id="24-设置一个元素的背景颜色，背景颜色会填充哪些区域？"><a href="#24-设置一个元素的背景颜色，背景颜色会填充哪些区域？" class="headerlink" title="24. 设置一个元素的背景颜色，背景颜色会填充哪些区域？"></a>24. 设置一个元素的背景颜色，背景颜色会填充哪些区域？</h4><h4 id="25-CSS画正方体，三角形"><a href="#25-CSS画正方体，三角形" class="headerlink" title="25.CSS画正方体，三角形"></a>25.CSS画正方体，三角形</h4>]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>面经——HTML_浏览器</title>
    <url>/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94HTML-%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<h4 id="1-Cookie、sessionStorage、localStorage的区别"><a href="#1-Cookie、sessionStorage、localStorage的区别" class="headerlink" title="1. Cookie、sessionStorage、localStorage的区别"></a>1. Cookie、sessionStorage、localStorage的区别</h4><h4 id="2-说几个很实用的BOM属性对象方法"><a href="#2-说几个很实用的BOM属性对象方法" class="headerlink" title="2. 说几个很实用的BOM属性对象方法"></a>2. 说几个很实用的BOM属性对象方法</h4><h4 id="3-说几个H5-的新标签"><a href="#3-说几个H5-的新标签" class="headerlink" title="3. 说几个H5 的新标签"></a>3. 说几个H5 的新标签</h4><h4 id="4-说一下HTML5-drag"><a href="#4-说一下HTML5-drag" class="headerlink" title="4. 说一下HTML5 drag"></a>4. 说一下HTML5 drag</h4><h4 id="5-说一下web-worker"><a href="#5-说一下web-worker" class="headerlink" title="5.说一下web worker"></a>5.说一下web worker</h4>]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>面经——计算机网络</title>
    <url>/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>本文经过借鉴书籍资料、他人博客、牛客网面经总结出的知识点</p>
<h4 id="1-http和https"><a href="#1-http和https" class="headerlink" title="1.http和https"></a>1.http和https</h4><p><strong>1.1 http是什么？</strong></p>
<p>超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>
<p><strong>1.2 https是什么？</strong></p>
<p>是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<a id="more"></a>

<p><strong>1.3 https的工作原理</strong></p>
<p>https的SSL加密是在传输层实现的</p>
<p>客户端在使用https方式与Web服务器通信时有以下几个步骤，如图所示。</p>
<p><img src="https%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="https工作流程"></p>
<p>客户使用https url访问服务器，则要求web 服务器建立ssl链接。</p>
<p>web服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），返回或者说传输给客户端。</p>
<p>客户端和web服务器端开始协商SSL链接的安全等级，也就是加密等级。</p>
<p>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</p>
<p>web服务器通过自己的私钥解密出会话密钥。</p>
<p>web服务器通过会话密钥加密与客户端之间的通信。</p>
<p><strong>1.4 https和http的区别</strong></p>
<p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。<br>主要的区别如下：</p>
<p>（1）http是明文传输，https则是具有安全性的SSL加密传输协议；</p>
<p>（2）http无法进行身份验证，而https可以通过CA证书进行身份验证，但成本提高了；</p>
<p>（3）http无法保证传输信息的完整性，即传输过程中有可能遭篡改；</p>
<p>（4）端口不同：一般而言，http协议的端口是80，https协议的端口是443</p>
<p><strong>1.5 https的优点</strong></p>
<p>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p>
<p>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p>
<p>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p>
<p>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p>
<p><strong>1.6 https的缺点</strong></p>
<p>https握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电。</p>
<p>https缓存不如http高效，会增加数据开销。</p>
<p>SSL证书也需要钱，功能越强大的证书费用越高。</p>
<p>SSL证书需要绑定IP，不能再同一个ip上绑定多个域名，ipv4资源支持不了这种消耗</p>
<h4 id="2-谈一下TCP"><a href="#2-谈一下TCP" class="headerlink" title="2. 谈一下TCP"></a>2. 谈一下TCP</h4><p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E6%8A%A5%E5%A4%B4.jpg" alt="TCP报头"></p>
<p>序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。</p>
<p>确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号。</p>
<p>确认ACK：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效</p>
<p>同步SYN：连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</p>
<p>终止FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</p>
<p>PS：ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</p>
<p>SYN：请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为1</p>
<p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E5%AD%97%E6%AE%B5.png" alt="TCP字段"></p>
<p><strong>2.1 TCP的三次握手和四次挥手</strong></p>
<p>（1）三次握手过程如图：</p>
<p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="TCP三次握手"></p>
<p>第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p>
<p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>
<p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
<p>（2）四次挥手过程如图：</p>
<p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="tcp四次挥手"></p>
<p>1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。<br>2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。<br>3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。<br>4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。<br>5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。<br>6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p>
<p><strong>2.2 TCP和UDP的区别</strong></p>
<p>TCP：提供的是面向连接、可靠的字节流服务，即客户端和服务器端传输数据之前必须先进行TCP三次握手连接，才能传输数据。并且提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。</p>
<p>UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的运输层协议。它不提供可靠性，只是把应用程序传给IP层的数据报发送出去，但是不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户和服务器之间建立一个连接，且没有超时重发等机制，所以传输速度很快。UDP报头如下图：</p>
<p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/UDP%E6%8A%A5%E5%A4%B4.png" alt="UDP报头"></p>
<p><strong>TCP和UDP的区别：</strong></p>
<p>（1）TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>（2）TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保  证可靠交付<br>（3）TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br> UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>（4）每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>（5）TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>（6）TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p>
<h4 id="3-WebSocket的实现和应用"><a href="#3-WebSocket的实现和应用" class="headerlink" title="3.WebSocket的实现和应用"></a>3.WebSocket的实现和应用</h4><p>HTTP瓶颈：</p>
<p>（1）一条连接上只可发送一个请求</p>
<p>（2）请求只能从客户端开始。客户端不可以接收除响应以外的指令</p>
<p>（3）请求/响应首部未经压缩就发送。首部信息越多延迟越大</p>
<p>（4）发送冗长的首部。每次互相发送相同的首部造成的浪费较多</p>
<p>（5）可任意选择数据压缩格式。非强制压缩发送</p>
<p><strong>使用浏览器进行全双工通信的WebSocket</strong></p>
<p><strong>什么是WebSocket?</strong></p>
<p>WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个（减少重复建立tcp连接的次数，但一个请求只能对应一个响应，管线化可以使客户端不需要等待响应即发送下一次请求，但仍是一个请求对应一个响应）</p>
<p><strong>主要特点：</strong></p>
<p>（1）服务器端推送功能</p>
<p>（2）减少通信量：只要建立起WebSocket通信，就希望<strong>一直保持连接状态</strong>，和HTTP相比，不但每次连接时的总开销减少，而且由于WebSocket的<strong>首部信息很小</strong>，通信量也相应减少了</p>
<p><strong>为了实现WebSocket通信，在HTTP连接建立以后，需要完成一次“握手”的步骤</strong></p>
<p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/webSocket%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B.png" alt="webSocket建立过程"></p>
<h4 id="4-HTTP请求的方式："><a href="#4-HTTP请求的方式：" class="headerlink" title="4.HTTP请求的方式："></a>4.HTTP请求的方式：</h4><p>（1）GET：获取资源</p>
<p>（2）POST：传输实体主体</p>
<p>（3）PUT：传输文件：就像FTP协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求URI指定的位置。但是鉴于HTTP/1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的Web网站不使用该方法。</p>
<p>（4）HEAD：获得报文首部：用于确认URI的有效性及资源更新的日期时间等</p>
<p>（5）DELETE：删除文件：按照请求URI删除指定的资源（不带验证机制，一般不使用）</p>
<p>（6）OPTIONS：询问支持的方法：用来查询针对请求URI指定的资源支持的方法</p>
<p>（7）TRACE：追踪路径：让Web服务器端将之前的请求通信环回给客户端，客户端通过TRACE方法可以查询发送出去的请求是怎样被加工/篡改的，但是该方法 不常用，易引发XST（Cross-Site Tracing,跨站追踪）攻击</p>
<p>（8）CONNECT：要求用隧道协议连接代理：要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL（Secure Sockets Layer,安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输</p>
<p><strong>4.1 HEAD方法：</strong></p>
<p>head：类似于get请求，只不过返回的响应中没有具体的内容，用户获取报头</p>
<p>options：允许客户端查看服务器的性能，比如说服务器支持的请求方式等等。</p>
<p><strong>4.2 GET和POST的区别：</strong></p>
<p><img src="/2020/03/17/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/POST%E4%B8%8EGET.png" alt="POST与GET"></p>
<h4 id="5-简单说一下HTTP2-0"><a href="#5-简单说一下HTTP2-0" class="headerlink" title="5.简单说一下HTTP2.0"></a>5.简单说一下HTTP2.0</h4><h4 id="6-一个图片url访问后直接下载怎样实现？"><a href="#6-一个图片url访问后直接下载怎样实现？" class="headerlink" title="6.一个图片url访问后直接下载怎样实现？"></a>6.一个图片url访问后直接下载怎样实现？</h4><h4 id="7-说一下web-Quality（无障碍）"><a href="#7-说一下web-Quality（无障碍）" class="headerlink" title="7.说一下web Quality（无障碍）"></a>7.说一下web Quality（无障碍）</h4><h4 id="8-补充400和401、403状态码"><a href="#8-补充400和401、403状态码" class="headerlink" title="8.补充400和401、403状态码"></a>8.补充400和401、403状态码</h4><p>常用的HTTP状态码</p>
<p><strong>状态码类别：</strong></p>
<p>1XX：Information（信息性状态码）：接收的请求正在处理</p>
<p><strong>2XX：Success（成功状态码）：请求正常处理完毕</strong></p>
<p>200 OK：表示从客户端发来的请求在服务器端被正常处理了</p>
<p>204 No Content：表示服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分</p>
<p>206 Partial Content：表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求</p>
<p><strong>3XX：Redirection（重定向状态码）：需要进行附加操作以完成请求</strong></p>
<p>301 Moved Permanently：永久性重定向，该状态码表示请求的资源已被分配了新的URI，<strong>以后</strong>应使用资源现在所指的URI</p>
<p>302 Found：临时性重定向，该状态码表示请求的资源已被分配了新的URI，希望用户<strong>本次</strong>能使用新的URI访问</p>
<p>303 See Other：与302状态码有着相同功能，但303状态码明确表示客户端应当采用GET方法获取资源，这点与302有区别</p>
<p>304 Not Modified（与重定向无关）：表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况，不包含任何响应的主体部分(<strong>如协商缓存机制中的：If-Modified-Since和If-None-Match</strong>)</p>
<p>307 Temporary Redirect（临时重定向）：与302有着相同含义，遵守浏览器标准，不会从POST变为GET</p>
<p><strong>4XX：Client Error（客户端错误状态码）：服务器无法处理请求</strong></p>
<blockquote>
<p>400 Bad Request：表示请求报文中存在语法错误</p>
<p>401 Unauthorized：表示发送的请求需要有通过HTTP认证的认证信息，另外若之前已进行过一次HTTP请求，则表示用户认证失败</p>
<p>403 Forbidden：表明对请求资源的访问被服务器拒绝了</p>
</blockquote>
<p>404 Not Found：表明服务器上无法找到请求的资源（也可以在服务器端拒绝请求且不想说明理由时使用）</p>
<p>412 Precondition Failed :先决条件失败</p>
<p><strong>5XX：Server Error（服务器错误状态码）：服务器处理请求出错</strong></p>
<p>500 Internal Server Error：该状态码表示服务器端在执行请求时发生了错误</p>
<p>503 Service Unavailable：表明服务器端暂时处于超负载或正在进行停机维护，现在无法处理请求</p>
<h4 id="9-fetch发送2次请求的原因"><a href="#9-fetch发送2次请求的原因" class="headerlink" title="9. fetch发送2次请求的原因"></a>9. fetch发送2次请求的原因</h4><p>fetch发送post请求的时候，总是发送2次，第一次状态码是204，第二次才成功？</p>
<p>原因很简单，因为你用fetch的post请求的时候，导致fetch 第一次发送了一个Options请求，询问服务器是否支持修改的请求头，如果服务器支持，则在第二次中发送真正的请求</p>
<h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
</search>
